from nutr_cleaner import DataCleaner
import os

current_dir = os.path.dirname(os.path.abspath(__file__))
file_path = os.path.join(current_dir, "merged_nutrition_information.xlsx")
dc: DataCleaner = DataCleaner(file_path)

percent_missing_calories = dc.calculate_missing_calorie("calories_x")
print(percent_missing_calories)

columns_to_merge = [
    'ingredients/0',
    'ingredients/1',
    'ingredients/2',
    'ingredients/3',
    'ingredients/4',
    'ingredients/5',
    'ingredients/6',
    'ingredients/7',
    'ingredients/8',
    'ingredients/9',
    'ingredients/10',
    'ingredients/11',
    'ingredients/12',
    'ingredients/13',
    'ingredients/14',
    'ingredients/15',
    'ingredients/16',
    'ingredients/17',
    'ingredients/18',
    'ingredients/19',
    'ingredients/20',
    'ingredients/21',
    'ingredients/22',
    'ingredients/23',
    'ingredients/24',
    'ingredients/25',
    'ingredients/26',
    'ingredients/27',
    'ingredients/28',
    'ingredients/29',
    'ingredients/30',
    'ingredients/31',
    'ingredients/32',
    'ingredients/33',
    'ingredients/34',
    'ingredients/35',
    'ingredients/36',
    'ingredients/37',
    'ingredients/38',
    'ingredients/39',
    'ingredients/40',
    'ingredients/41',
    'ingredients/42',
    'ingredients/43',
    'ingredients/44',
    'ingredients/45',
    'ingredients/46',
    'ingredients/47',
    'ingredients/48',
]
dc.df['ingredients'] = dc.df[columns_to_merge].map(str).agg(', '.join, axis=1)
dc.remove_text('ingredients', 'nan, ')

dc.find_serving_info('serving_size')

# Modifies the dataframe by added specific columns in requested order
dc.df = dc.df[[
    'dep/cat/shelf1',
    'dep/cat/shelf2',
    'dep/cat/shelf3',
    'product_name_x',
    'brand',
    'short_description',
    'serving_size',
    'percent_juice', 
    'calories_y',
    'total_fat_absolute',
    'total_fat_DV',
    'saturated_fat_absolute',
    'saturated_fat_DV',
    'total_carbs_absolute',
    'total_carbs_DV',
    'total_sugars_absolute',
    'included_added_sugars_absolute',
    'included_added_sugars_DV',
    'protein_absolute',
    'protein_DV',
    'cholesterol_absolute',
    'cholesterol_DV',
    'trans_fat_absolute',
    'trans_fat_DV',
    'polyunsaturated_fat_absolute',
    'monounsaturated_fat_absolute',
    'fiber_absolute',
    'fiber_DV',
    'ingredients',
    'product_URL',
    'thumbnail_image_url',
    'image_url_1',
    'image_url_2',
    'image_url_3',
    'image_url_4',
    'image_url_5',
    'image_url_6',
    'image_url_7',
    'image_url_8',
    'image_url_9',
    'image_url_10',
    'image_url_11',
    'image_url_12',
    'price',
    'universal_product_code',
    'zip_code',
    'snap_eligible',
    'avg_rating',
    'review_count'
]]
dc.df.rename(columns={'product_name_x': 'product_name'}, inplace=True)
dc.apply_parse_product_name('product_name')

# Rename dep, shelf, and aisle columns 
dc.df.rename(columns={'dep/cat/shelf1': 'department'}, inplace=True)
dc.df.rename(columns={'dep/cat/shelf2': 'aisle'}, inplace=True)
dc.df.rename(columns={'dep/cat/shelf3': 'shelf'}, inplace=True)

dc.df = dc.df[[
    'department',
    'aisle',
    'shelf',
    'product_name',
    'brand',
    'short_description',
    'serving_size',
    'pack_unit',
    'unit_size',
    'pack_size',
    'percent_juice', 
    'calories_y',
    'total_fat_absolute',
    'total_fat_DV',
    'saturated_fat_absolute',
    'saturated_fat_DV',
    'total_carbs_absolute',
    'total_carbs_DV',
    'total_sugars_absolute',
    'included_added_sugars_absolute',
    'included_added_sugars_DV',
    'protein_absolute',
    'protein_DV',
    'cholesterol_absolute',
    'cholesterol_DV',
    'trans_fat_absolute',
    'trans_fat_DV',
    'polyunsaturated_fat_absolute',
    'monounsaturated_fat_absolute',
    'fiber_absolute',
    'fiber_DV',
    'ingredients',
    'product_URL',
    'thumbnail_image_url',
    'image_url_1',
    'image_url_2',
    'image_url_3',
    'image_url_4',
    'image_url_5',
    'image_url_6',
    'image_url_7',
    'image_url_8',
    'image_url_9',
    'image_url_10',
    'image_url_11',
    'image_url_12',
    'price',
    'universal_product_code',
    'zip_code',
    'snap_eligible',
    'avg_rating',
    'review_count'
]]
print(dc.df['product_name'][2], dc.parse_product_name((dc.df['product_name'][2])))
dc.save_data("Nutrition_Information_Processing\edited.xlsx")
